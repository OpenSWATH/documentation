PyProphet
=========

Overview
--------

PyProphet [1]_ is a reimplementation of the mProphet [2]_ algorithm for targeted proteomics. It is particularly optimized for analysis of large scale data sets generated by OpenSWATH or DIANA.

This description represents the new SQLite-based workflow that is currently in development. This version includes the IPF [3]_ and large-scale data set optimizations [4]_. You can alternatively follow the instructions for the :doc:`pyprophet_legacy`.

Contact and Support
-------------------

We provide support for PyProphet on the `GitHub repository
<https://github.com/PyProphet/pyprophet/issues>`_.

You can contact the authors `Uwe Schmitt
<https://www.ethz.ch/services/en/organisation/departments/it-services/people/person-detail.html?persid=204514>`_, `Johan Teleman
<https://github.com/fickludd>`_, `Hannes Röst
<http://www.hroest.ch>`_ and `George Rosenberger
<http://www.rosenberger.pro>`_.

Installation
------------

PyProphet requires Python 2.7 or Python 3. Windows users should install Anaconda, Mac and Linux users should be able to install PyProphet directly from GitHub. It is strongly recommended to install PyProphet within a ``virtualenv``.

.. code-block:: bash

   pip install git+https://github.com/grosenberger/pyprophet.git@feature/refactoring


Tutorial
--------

Generate ``OSW`` output files according to section :doc:`openswath_workflow`. PyProphet is then applied to the one or several such SQLite-based reports. Several different commands can be run to consecutively to do the analysis:

.. code-block:: bash

   pyprophet merge --out=merged.osw \
   --subsample_ratio=1 *.osw

This command will merge and optionally subsample multiple files. If a set of runs should be analyzed in an experiment-wide fashion, we recommend to conduct this step. If semi-supervised learning is too slow, create an additional merged file with a smaller ``subsample_ratio``. The model will be stored in the output and can be applied to the full file.

.. code-block:: bash

   pyprophet score --in=merged.osw --level=ms2

The main command will conduct semi-supervised learning and error-rate estimation in a fully automated fashion. ``--help`` will show the full selection of parameters to adjust the process. The default parameters are recommended for SCIEX TripleTOF 5600/6600 instrument data, but can be adjusted in other scenarios. 

When using the IPF extension, the parameter ``--level`` can be set to ``ms2``, ``ms1`` or ``transition``. If MS1 or transition-level data should be scored, the command is executed three times, e.g.:

.. code-block:: bash

   pyprophet score --in=merged.osw --level=ms1 \
   score --in=merged.osw --level=ms2 \
   score --in=merged.osw --level=transition

Importantly, PyProphet will store all results in the input OSW files. This can be changed by specifying ``--out``. However, since all steps are non-destructive, this is not necessary.

If IPF should be applied after scoring, the following command can be used:

.. code-block:: bash

   pyprophet ipf --in=merged.osw

To adjust the IPF-specific parameters, please consult ``pyprophet ipf --help``.

To conduct peptide inference in run-specific, experiment-wide and global contexts, the following command can be applied:

.. code-block:: bash

   pyprophet peptide --in=merged.osw --context=run-specific \
   peptide --in=merged.osw --context=experiment-wide \
   peptide --in=merged.osw --context=global

This will generate individual PDF reports and store the scores in a non-redundant fashion in the OSW file.

Analogously, this can be conducted on protein-level as well:

.. code-block:: bash

   pyprophet protein --in=merged.osw --context=run-specific \
   protein --in=merged.osw --context=experiment-wide \
   protein --in=merged.osw --context=global

Finally, we can export the results to legacy OpenSWATH TSV report:

.. code-block:: bash

   pyprophet export --in=merged.osw --out=legacy.tsv

By default, both peptide- and transition-level quantification is reported, which is necessary for requantification or ``SWATH2stats``. If peptide and protein inference in the global context was conducted, the results will be filtered to 1% FDR by default. Further details can be found by ``pyprophet export --help``.

.. warning::
   By default, IPF results will be used if available. This can be disabled by setting ``--no-ipf``. The IPF results require different properties for TRIC. Please ensure that you want to analyze the results in the context of IPF, else, use the ``--no-ipf`` settings.


References
----------
.. [1] Teleman J, Röst HL, Rosenberger G, Schmitt U, Malmström L, Malmström J, Levander F. DIANA--algorithmic improvements for analysis of data-independent acquisition MS data. Bioinformatics. 2015 Feb 15;31(4):555-62. doi: 10.1093/bioinformatics/btu686. Epub 2014 Oct 27. PMID: 25348213

.. [2] Reiter L, Rinner O, Picotti P, Hüttenhain R, Beck M, Brusniak MY, Hengartner MO, Aebersold R. mProphet: automated data processing and statistical validation for large-scale SRM experiments. Nat Methods. 2011 May;8(5):430-5. doi: 10.1038/nmeth.1584. Epub 2011 Mar 20. PMID: 21423193

.. [3] Rosenberger G, Liu Y, Röst HL, Ludwig C, Buil A, Bensimon A, Soste M, Spector TD, Dermitzakis ET, Collins BC, Malmström L, Aebersold R. Inference and quantification of peptidoforms in large sample cohorts by SWATH-MS. Nat Biotechnol. 2017 Aug;35(8):781-788. doi: 10.1038/nbt.3908. Epub 2017 Jun 12. PMID: 28604659

.. [4] Rosenberger G, Bludau I, Schmitt U, Heusel M, Hunter CL, Liu Y, MacCoss MJ, MacLean BX, Nesvizhskii AI, Pedrioli PGA, Reiter L, Röst HL, Tate S, Ting YS, Collins BC, Aebersold R. Statistical control of peptide and protein error rates in large-scale targeted data-independent acquisition analyses. Nat Methods. 2017 Sep;14(9):921-927. doi: 10.1038/nmeth.4398. Epub 2017 Aug 21. PMID: 28825704
